patient_years[Years >= death_yr, dead := 1]
patient_years[is.na(dead), dead :=0]
## spot check the data
patient_years[PatientID == 1]
patient_years[PatientID == 2]
## looks good
## implement logic for at-risk
patient_years[Years < min_vis,
at_risk := 'no']
patient_years[Years >= min_vis,
at_risk := 'yes']
patient_years[Years > death_yr,
at_risk := 'no']
## spot check again
patient_years[PatientID == 1]
patient_years[PatientID == 2]
## looks good!
dim
dim(patient_years)
View(patient_years)
patient_years[at_risk == 'yes',
list(n_unique_patients = uniqueN(PatientID),
n_at_risk = .N,
n_dead = sum(dead),
mortality_rate=mean(dead)),
by=Years]
patient_years[at_risk == 'yes']
dim(patient_years[at_risk == 'yes'])
patient_years[at_risk == 'yes',
list(n_unique_patients = uniqueN(PatientID),
n_at_risk = .N,
n_dead = sum(dead),
mortality_rate=mean(dead)),
keyby=Years]  ## keyby sorts it by years
library(gapminder)
data(gapminder)
rm(list = ls())
library(gapminder)
data(gapminder)
gapminder
pacman::p_load(gapminder, data.table)
data(gapminder)
gapminder = data.table(gapminder)
View(gapminder)
names(gapminder)
gapminder[year == 2007, median_lifeExp = median(lifeExp), continent]
gapminder[year == 2007, .(median_lifeExp = median(lifeExp)), continent]
gapminder[year == 2007, .(median_lifeExp = median(lifeExp)), keyby = continent]
pacman::p_load(gapminder, data.table, parallel, doParallel)
detectCores()
gapminder[year == 2007, .(median_lifeExp = median(lifeExp,na.rm=T)), keyby = continent]
gapminder2007 = gapminder[year == 2007]
gapminder2007[, .(median_lifeExp = median(lifeExp,na.rm=T)), keyby = continent]
detectCores()
cl <- makeCluster(3)
registerDoParallel(cl)
n_boot = 1e4
gc()
# Not parallel
starttime1 = Sys.time()
result1 <-
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
median(lifeExp, na.rm=T), keyby = continent]
temp_result
}
endtime1 <- Sys.time()
endtime1 - starttime1
hist(result1)
result1[1]
result1[[1]]
result1[2]
result1[3]
result1[4]
detectCores()
cl <- makeCluster(3)
registerDoParallel(cl)
n_boot = 1e4
gc()
# Not parallel
starttime1 = Sys.time()
result1 <-
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
temp_result
}
endtime1 <- Sys.time()
endtime1 - starttime1
#hist(result1)
# Parallel version
rm(temp_result)
gc()
starttime2 <- Sys.time()
result2 <-
foreach(i=1:n_boot,
.combine='c',.packages = 'data.table') %dopar% {
temp_result = flights_sample[sample(.N,replace = T),
median(arr_delay,na.rm=T)]
temp_result
}
endtime2 <- Sys.time()
endtime2 - starttime2
#hist(result2)
rm(temp_result)
gc()
starttime2 <- Sys.time()
result2 <-
foreach(i=1:n_boot,
.combine='c',.packages = 'data.table') %dopar% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
temp_result
}
endtime2 <- Sys.time()
endtime2 - starttime2
result2[1]
result2[2]
mtcars = data.table(mtcars)
mtcars[,z:=1]
View(mtcars)
n_boot = 10
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
temp_result[,index := 1]
}
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
result1[[i]] = temp_result[,index := 1]
}
View(result1)
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
result1[[i]] <- temp_result[,index := 1]
}
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
re
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
result1[i] <- temp_result[,index := 1]
}
result1 = list()
foreach(i=1:n_boot, .combine='c') %do% {
temp_result = gapminder2007[sample(.N, replace = T),
.(median_lifeExp = median(lifeExp, na.rm=T)),
keyby = continent]
result1[[i]] <- temp_result[,index := 1]
}
pacman::p_load(gapminder, data.table, parallel, doParallel, foreach, ggplot2)
data(gapminder)
gapminder = data.table(gapminder)
gapminder2007 = gapminder[year == 2007 & continent != 'Oceania']
View(gapminder2007)
detectCores()
library(brms)
load("F:/Onedrive/OneDrive - Saint Louis University/Orders/BayesianquantileTobit/fit/fit2.Rdata")
str(fit2)
brms::prior_summary(fit2)
brms::prior_summary(fit2, all = FALSE)
prior_summary(fit, all = FALSE), show_df = FALSE
print(prior_summary(fit, all = FALSE), show_df = FALSE)
print(prior_summary(fit2, all = FALSE), show_df = FALSE)
print(prior_summary(fit2, all = FALSE), show_df = TRUE)
plot(fit2)
get_variables(fit2)
require(tidybayes)
install.packages('tidybayes')
library(tidybayes)
get_variables(fit2)
prior_summary(fit2)
prior_samples(fit2, pars = 'b_Intercept')
prior_samples(fit2)
fit2
str(fit2)
fit2$prior
stancode(fit2)
?rt
stan_t = function(x, nu, mu, sigma){
factorial((nu+1)/2 - 1)/(factorial(nu/2 - 1))*(1/(sqrt(nu*pi)*sigma))*(1+1/nu*((x-nu)/sigma)^2)^(-(nu+1)/2)
}
prior_summary(fit2)
prior_summary(fit2, all= FALSE)
x = seq(-10, 10, 0.01)
simy = stan_t(x, 3, 1, 10)
plot(density(simy))
hist(simy)
plot(x, simy, type = 'l')
x = seq(-10, 100, 0.01)
simy = stan_t(x, 3, 1, 10)
plot(x, simy, type = 'l')
x = seq(-100, 100, 0.01)
simy = stan_t(x, 3, 1, 10)
plot(x, simy, type = 'l')
plot_t = function(nu, mu, sigma){
x = seq(-100, 100, 0.01)
simy = stan_t(x, nu, mu, sigma)
plot(x, simy, type = 'l', main = paste('t distribution with nu = ', nu, 'mu =', mu, 'sigma =', sigma))
}
plot_t = function(nu, mu, sigma){
x = seq(-100, 100, 0.01)
simy = stan_t(x, nu, mu, sigma)
plot(x, simy, type = 'l', main = paste('t distribution with nu = ', nu, 'mu =', mu, 'sigma =', sigma))
}
plot_t(3, 1, 10)
prior_summary(fit2)
plot_t(3, 0, 10)
zdsg
plot_t(3, 1, 10)
plot_t(3, 0, 10)
prior_summary(fit2, all = FALSE)
fit2
parnames(fit2)
vignette("brms_families")
prior_summary(fit2, all = FALSE)
str(fit2)
load("F:/Onedrive/OneDrive - Saint Louis University/Orders/BayesianquantileTobit/fit/fit01.Rdata")
f0 = qfit0
summary(f0)
stancode(f0)
prior_summary(f0)
pacman::p_load(tidyverse)
op = read_csv('healthcare2/OutpatientVisit.csv')
oplong = gather(op, key = 'index', value = 'ICD10', -ICD10_1, , -ICD10_2, -ICD10_3)
oplong = gather(op, key = 'index', value = 'ICD10')
View(oplong)
names(oplong)
names(op)
oplong = op %>%
select(ICD10_1, ICD10_2, ICD10_3) %>%
gather(op, key = 'index', value = 'ICD10', - PatientID)
oplong = op %>%
select(ICD10_1, ICD10_2, ICD10_3) %>%
gather(op, key = 'index', value = 'ICD10', -PatientID)
oplong = op %>%
select(ICD10_1, ICD10_2, ICD10_3) %>%
gather(op, key = 'index', value = 'ICD10', -'PatientID')
?gather
oplong = op %>%
select(ICD10_1, ICD10_2, ICD10_3) %>%
gather(key = 'index', value = 'ICD10', -PatientID)
oplong = op %>%
select(PatientID, ICD10_1, ICD10_2, ICD10_3) %>%
gather(key = 'index', value = 'ICD10', -PatientID)
View(oplong)
grep("F32|F33", "F322212")
grep("F32|F33", "DSF322212")
grepl("F32|F33", "DSF322212")
oplong = op %>%
select(PatientID, ICD10_1, ICD10_2, ICD10_3) %>%
gather(key = 'index', value = 'ICD10', -PatientID) %>%
mutate(depression = grepl("F32|F33", ICD10))
oplong %>% group_by(PatientID) %>%
summarise(depressionsum = sum(depression))
sum(oplong$depression)/nrow(oplong)
sum(oplong$depressionsum)/nrow(oplong)
zz = oplong %>% group_by(PatientID) %>%
summarise(depressionsum = sum(depression))
sum(zz$depressionsum)/nrow(zz)
sum(as.logical(zz$depressionsum))/nrow(zz)
max(zz$depressionsum)
nrow(zz)
zz = oplong %>% group_by(PatientID) %>%
summarise(depressionsum = sum(depression)) %>%
mutate(depressionsum = ifelse(depressionsum > 1, 1, depressionsum))
sum(as.logical(zz$depressionsum))/nrow(zz)
1505.11/2
752/2
install.packages(c("GA", "geosphere", "rgdal"))
pacman::p_load(data.table)
dat = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
pacman::p_load(data.table, rgdal)
class(dat)
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
shp_path = '.HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
head(dat)
pacman::p_load(data.table, rgdal, sf)
MOdat = sf::st_read(
paste0(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations', '.shp'))
MOdat = sf::st_read(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp'))
View(MOdat)
View(MOdat)
View(MOdat)
MOdat1 = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
dplyr::select(OBJECTID, Latitude,Longitude)
pacman::p_load(data.table, rgdal, dplyr)
MOdat = sf::st_read(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
dplyr::select(OBJECTID, Latitude,Longitude)
View(MOdat)
sf::st_read(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
dplyr::select(OBJECTID, Latitude, Longitude)
sf::read_sf(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp'))
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
dplyr::select(OBJECTID, Latitude, Longitude)
MOdat = sf::read_sf(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
dplyr::select(OBJECTID, Latitude, Longitude)
View(MOdat)
class(MOdat)
MOdat = sf::read_sf(
paste0(shp_path, '/MO_2018_Federally_Qualified_Health_Center_Locations', '.shp')) %>%
as.data.frame() %>%
dplyr::select(OBJECTID, Latitude, Longitude)
rm(list = ls())
pacman::p_load(data.table, rgdal, dplyr)
dat = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
choose(8,4)
choose(194,8)
?combn
combn(1:5, 2)
pacman::p_load(broom)
choose(194,10)
sample(8)
sample(8)
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
possible_solutions
dat
MOdat
str(MOdat)
MO_residents_sample
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)]
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
?CJ
as.character(MO_FQHC_df_8$OBJECTID)
MO_residents_sample$pat_ID
dim(MO_residents_sample)[1]
dim(pat_clinic_combinations)[1]
dim(pat_clinic_combinations)[1]/dim(MO_residents_sample)[1]
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
head(pat_clinic_combinations)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
head(pat_clinic_combinations)
MO_FQHC_df_8
possible_solutions
MO_FQHC_df_8
t(combn(x = as.character(MO_FQHC_df_8￥OBJECTID), m = 4))
t(combn(x = as.character(MO_FQHC_df_8$OBJECTID), m = 4))
MO_FQHC_df_8
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(data.table, rgdal, dplyr)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
pacman::p_load(data.table, rgdal, dplyr, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)][, pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages('jags')
library
library(jags)
install.packages('rjags')
library(rjags)
df <- data.frame(
x = rep(0:1, each = 50),
y1 = c(sample(1:10, 50, TRUE), sample(6:15, 50, TRUE)),
y2 = c(sample(11:20, 50, TRUE), sample(6:15, 50, TRUE)),
y3 = c(sample(21:30, 50, TRUE), sample(6:15, 50, TRUE)),
obs = 1:100
)
df
knitr::opts_chunk$set(echo = TRUE)
59-46
59-46 +120
60-48+15 + 180
60-37+5
55-32
43-16+120
180+51-7
180+60-42+24
