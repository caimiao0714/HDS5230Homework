MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
possible_solutions
dat
MOdat
str(MOdat)
MO_residents_sample
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)]
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
?CJ
as.character(MO_FQHC_df_8$OBJECTID)
MO_residents_sample$pat_ID
dim(MO_residents_sample)[1]
dim(pat_clinic_combinations)[1]
dim(pat_clinic_combinations)[1]/dim(MO_residents_sample)[1]
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
head(pat_clinic_combinations)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
head(pat_clinic_combinations)
MO_FQHC_df_8
possible_solutions
MO_FQHC_df_8
t(combn(x = as.character(MO_FQHC_df_8ï¿¥OBJECTID), m = 4))
t(combn(x = as.character(MO_FQHC_df_8$OBJECTID), m = 4))
MO_FQHC_df_8
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(data.table, rgdal, dplyr)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(data.table, rgdal, dplyr, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
## create data.table for later use
MO_FQHC_df <-
data.table(as.data.frame(MO_FQHC))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df
## how good is each solution? Depends on our definition of good.
## need to define and calculate an objective function (cost function)
## First we calculate the geodesic distance between each Patient and each clinic
## create a data.table of every clinic/patient pair:
## generate ID's for the residents
MO_residents_sample[,pat_ID:=1:.N]
## create a cartesian product with all combinations
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
setkey(pat_clinic_combinations, OBJECTID)
setkey(MO_FQHC_df_8, OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
## how good is each solution? Depends on our definition of good.
## need to define and calculate an objective function (cost function)
## First we calculate the geodesic distance between each Patient and each clinic
## create a data.table of every clinic/patient pair:
## generate ID's for the residents
MO_residents_sample[,pat_ID:=1:.N]
## create a cartesian product with all combinations
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)]
MO_residents_sample = MO_residents_sample[, pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)]
MO_residents_sample = MO_residents_sample[, pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
MO_residents_sample
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)][, pat_ID:=1:.N]
MO_residents_sample1 = MO_residents[sample(.N,size = .N*.01), pat_ID:=1:.N]
MO_residents_sample1
tail(MO_residents_sample1)
tail(MO_residents_sample)
pat_clinic_combinations[,distancemiles := distGeo(
matrix(c(Longitude_clinic, Latitude_clinic), ncol=2),
matrix(c(Longitude_patient, Latitude_patient), ncol=2))/1609.344]
?distGeo
matrix(c(Longitude_clinic, Latitude_clinic)
)
matrix(c(pat_clinic_combinations$Longitude_clinic, pat_clinic_combinations$Latitude_clinic))
head(matrix(c(pat_clinic_combinations$Longitude_clinic, pat_clinic_combinations$Latitude_clinic)))
matrix(c(pat_clinic_combinations$Longitude_clinic, pat_clinic_combinations$Latitude_clinic), ncol = 2)
obj_func_min_mid <-
function(solution,distMat) {
setkey(distMat,OBJECTID)
distMat[J(solution),
list(min_dist=min(distancemiles)),
by=pat_ID][,median(min_dist)]
}
obj_func_min_mid(solution = possible_solutions[1,],
distMat = pat_clinic_combinations)
obj_func_min_mean <-
function(solution,distMat) {
setkey(distMat,OBJECTID)
distMat[J(solution),
list(min_dist=min(distancemiles)),
by=pat_ID][,mean(min_dist)]
}
## function for first solution
obj_func_min_mean(solution = possible_solutions[1,],
distMat = pat_clinic_combinations)
dist_temp_8 <- apply(
possible_solutions, MARGIN = 1,
obj_func_min_mid, distMat = pat_clinic_combinations)
temp_results_8 <- data.table(dist_temp_8, possible_solutions)
temp_results_8[min(dist_temp_8) == dist_temp_8]
?J
DT = data.table(A=5:1,B=letters[5:1])
setkey(DT,B)
DT
DT[J("b")]
DT[list("b")]
dist_temp_8 <- apply(
possible_solutions, MARGIN = 1,
obj_func_max_40miles, distMat = pat_clinic_combinations)
temp_results_8 <- data.table(dist_temp_8, possible_solutions)
temp_results_8[min(dist_temp_8) == dist_temp_8]
obj_func_max_40miles <-
function(solution,distMat) {
setkey(distMat,OBJECTID)
distMat[J(solution),
list(min_dist=min(distancemiles)),
by=pat_ID][,sum(min_dist <= 40)]
}
dist_temp_8 <- apply(
possible_solutions, MARGIN = 1,
obj_func_max_40miles, distMat = pat_clinic_combinations)
temp_results_8 <- data.table(dist_temp_8, possible_solutions)
temp_results_8[min(dist_temp_8) == dist_temp_8]
MO_residents
MO_residents_sample
pat_clinic_combinations
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
pat_clinic_combinations
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long)]
pat_clinic_combinations
pat_clinic_combinations[MO_residents_sample]
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample]
pat_clinic_combinations
MO_residents_sample
pat_clinic_combinations[MO_residents_sample]
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long,
UR = UR)]
pat_clinic_combinations
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)][, pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long,
UR = UR)]
pat_clinic_combinations[,distancemiles := distGeo(
matrix(c(Longitude_clinic, Latitude_clinic), ncol=2),
matrix(c(Longitude_patient, Latitude_patient), ncol=2))/1609.344]
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=pat_ID]
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=pat_ID][,sum(min_dist <= 40)]
pat_clinic_combinations
(possible_solutions[1,]
)
pacman::p_load(dplyr, data.table, rgdal, geosphere)
MO_residents = fread('HW8/Mo_pop_Sim/Mo_pop_Sim.csv')
set.seed(32)
MO_residents_sample = MO_residents[sample(.N,size = .N*.01)][, pat_ID:=1:.N]
shp_path = './HW8/MO_2018_Federally_Qualified_Health_Center_Locations'
MO = readOGR(shp_path, 'MO_2018_Federally_Qualified_Health_Center_Locations')
MOdat = data.table(as.data.frame(MO))[,list(OBJECTID, Latitude,Longitude)]
MO_FQHC_df_8 <- MOdat[sample(8)]
possible_solutions <-
MO_FQHC_df_8[,t(combn(x = as.character(OBJECTID), m = 4))]
pat_clinic_combinations <-
CJ(OBJECTID=as.character(MO_FQHC_df_8$OBJECTID),
pat_ID=MO_residents_sample$pat_ID)
## merge in the lat and long for clinics
setkey(pat_clinic_combinations,OBJECTID)
setkey(MO_FQHC_df_8,OBJECTID)
pat_clinic_combinations[MO_FQHC_df_8,':='(Latitude_clinic=Latitude,
Longitude_clinic=Longitude)]
## merge in the lat and long for patients
setkey(pat_clinic_combinations,pat_ID)
setkey(MO_residents_sample,pat_ID)
pat_clinic_combinations[MO_residents_sample,':='(Latitude_patient=lat,
Longitude_patient=long,
UR = UR)]
pat_clinic_combinations[,distancemiles := distGeo(
matrix(c(Longitude_clinic, Latitude_clinic), ncol=2),
matrix(c(Longitude_patient, Latitude_patient), ncol=2))/1609.344]
pat_clinic_combinations
setkey(pat_clinic_combinations,OBJECTID)
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=pat_ID][,sum(min_dist <= 40)]
possible_solutions
pat_clinic_combinations
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=pat_ID][,sum(min_dist <= 40)]
possible_solutions[1,]
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=pat_ID]
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)]
pat_clinic_combinations[J(possible_solutions[1,]),
list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,.(sum(min_dist <= 40), weight = c(5, 1)),UR]
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40)]
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR]
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,ot = sum(min_dist <= 40),UR][,sum(ot*c(5, 1))]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,ot = sum(min_dist <= 40),UR][,sum(ot*c(5, 1))]
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,ot = sum(min_dist <= 40),UR]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,ot = sum(min_dist <= 40),UR]
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,.(ot = sum(min_dist <= 40)),UR][,sum(ot*c(5, 1))]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,.(ot = sum(min_dist <= 40)),UR][,sum(ot*c(5, 1))]
5151*5+12205
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR][,sum(V1*c(5, 1))]
pat_clinic_combinations[
J(possible_solutions[1,]),list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR][,sum(V1*c(5, 1))]
obj_func_max_40miles_rural5_1 <-
function(solution,distMat) {
setkey(distMat,OBJECTID)
distMat[J(solution),
list(min_dist=min(distancemiles)),
by=.(pat_ID, UR)][,sum(min_dist <= 40),UR][,sum(V1*c(5, 1))]
}
dist_temp_8 <- apply(
possible_solutions, MARGIN = 1,
obj_func_max_40miles_rural5_1, distMat = pat_clinic_combinations)
temp_results_8 <- data.table(dist_temp_8, possible_solutions)
temp_results_8[min(dist_temp_8) == dist_temp_8]
## Implement genetic algorithm
pacman::p_load(GA)
citation("GA")
## Implement genetic algorithm
pacman::p_load(GA)
## make inverse to maximize
## Alter the objective function a bit so it works with ga()
## I rewrote this function so it only uses the first 4 sites of the 'solution'
## the 'solution' is all every site in a random order.
obj_func_min_mean2 <-
function(solution,distMat,k) {
setkey(distMat,OBJECTID)
distMat[J(distMat[,unique(OBJECTID)[solution[1:k]]]), ## here is where I subset to only 4 sites
list(min_dist=min(distancemiles)),
by=pat_ID][,mean(min_dist)]
}
## make the inverse function so the maximum is the minimum...
Fitness_f <-
function(solution,...) 1/obj_func_min_mean2(solution, ...)
GA <- ga(type = "permutation", fitness = Fitness_f,
distMat = pat_clinic_combinations, k=4,
lower = 1, upper = 8, # these are the boundaries of the solution space (number of sites)
popSize = 10, # total number of solutions per generation
maxiter = 1000,  # max number of generations
run = 20, # if we get the same best answer 20 times in a row, stop
pmutation = 0.2) # this is the mutation rate per generation
## did it find the optimal solution?
## did it find the optimal solution?
summary(GA)
2^8
2^16
2^32
